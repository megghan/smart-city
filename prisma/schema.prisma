// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Modelo básico de PinAcessibilidade para a sua aplicação
model PinAcessibilidade {
  id                 String   @id @default(uuid())
  latitude           Float
  longitude          Float
  descricao          String
  tipoAcessibilidade String
  cidade             String   // Para filtrar os pins por cidade
  
  // No futuro, este campo será conectado ao modelo User do Auth.js
  // usuarioId          String?  
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// Futuramente, os modelos de 'User', 'Account', etc. do Auth.js virão aqui.
// ====================================================================
// MODELOS NECESSÁRIOS PARA O AUTH.JS 
// ====================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Adicione este relacionamento com sua tabela de pins
  // pins          PinAcessibilidade[] // Você fará isso depois de testar!
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}